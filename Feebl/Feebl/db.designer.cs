#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Feebl
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Feebl")]
	public partial class FeeblDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProcess(Process instance);
    partial void UpdateProcess(Process instance);
    partial void DeleteProcess(Process instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertDemand(Demand instance);
    partial void UpdateDemand(Demand instance);
    partial void DeleteDemand(Demand instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertUserSubscription(UserSubscription instance);
    partial void UpdateUserSubscription(UserSubscription instance);
    partial void DeleteUserSubscription(UserSubscription instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    #endregion
		
		public FeeblDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FeeblDB"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FeeblDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FeeblDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FeeblDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FeeblDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Process> Processes
		{
			get
			{
				return this.GetTable<Process>();
			}
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Demand> Demands
		{
			get
			{
				return this.GetTable<Demand>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<UserSubscription> UserSubscriptions
		{
			get
			{
				return this.GetTable<UserSubscription>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Process")]
	public partial class Process : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationID;
		
		private int _CustomerID;
		
		private string _ProcessID;
		
		private int _EventID;
		
		private System.Nullable<System.DateTime> _LastRunTime;
		
		private string _URL;
		
		private string _GroupID;
		
		private EntitySet<Event> _Logs;
		
		private EntitySet<Demand> _Demands;
		
		private EntitySet<UserSubscription> _UserSubscriptions;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIDChanging(int value);
    partial void OnApplicationIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProcessIDChanging(int value);
    partial void OnProcessIDChanged();
    partial void OnLastRunTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastRunTimeChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnGroupIDChanging(string value);
    partial void OnGroupIDChanged();
    #endregion
		
		public Process()
		{
			this._Logs = new EntitySet<Event>(new Action<Event>(this.attach_Logs), new Action<Event>(this.detach_Logs));
			this._Demands = new EntitySet<Demand>(new Action<Demand>(this.attach_Demands), new Action<Demand>(this.detach_Demands));
			this._UserSubscriptions = new EntitySet<UserSubscription>(new Action<UserSubscription>(this.attach_UserSubscriptions), new Action<UserSubscription>(this.detach_UserSubscriptions));
			this._Application = default(EntityRef<Application>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="int NOT NULL")]
		public int ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._ProcessID = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProcessID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnProcessIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("ProcessID");
					this.OnProcessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastRunTime", DbType="DateTime NULL")]
		public System.Nullable<System.DateTime> LastRunTime
		{
			get
			{
				return this._LastRunTime;
			}
			set
			{
				if ((this._LastRunTime != value))
				{
					this.OnLastRunTimeChanging(value);
					this.SendPropertyChanging();
					this._LastRunTime = value;
					this.SendPropertyChanged("LastRunTime");
					this.OnLastRunTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="nvarchar(255) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="nvarchar(255) NOT NULL", CanBeNull=false)]
		public string GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Process_Event", Storage="_Logs", ThisKey="ProcessID", OtherKey="ProcessID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Process_Demand", Storage="_Demands", ThisKey="ProcessID", OtherKey="ProcessID")]
		public EntitySet<Demand> Demands
		{
			get
			{
				return this._Demands;
			}
			set
			{
				this._Demands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Process_UserSubscription", Storage="_UserSubscriptions", ThisKey="ProcessID", OtherKey="ProcessID")]
		public EntitySet<UserSubscription> UserSubscriptions
		{
			get
			{
				return this._UserSubscriptions;
			}
			set
			{
				this._UserSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Process", Storage="_Application", ThisKey="ApplicationID", OtherKey="ApplicationID", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Processes.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Processes.Add(this);
						this._ApplicationID = value.ApplicationID;
					}
					else
					{
						this._ApplicationID = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Process", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Processes.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Processes.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Event entity)
		{
			this.SendPropertyChanging();
			entity.Process = this;
		}
		
		private void detach_Logs(Event entity)
		{
			this.SendPropertyChanging();
			entity.Process = null;
		}
		
		private void attach_Demands(Demand entity)
		{
			this.SendPropertyChanging();
			entity.Process = this;
		}
		
		private void detach_Demands(Demand entity)
		{
			this.SendPropertyChanging();
			entity.Process = null;
		}
		
		private void attach_UserSubscriptions(UserSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Process = this;
		}
		
		private void detach_UserSubscriptions(UserSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Process = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationID;
		
		private string _Name;
		
		private EntitySet<Process> _Events;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIDChanging(int value);
    partial void OnApplicationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Application()
		{
			this._Events = new EntitySet<Process>(new Action<Process>(this.attach_Events), new Action<Process>(this.detach_Events));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="nvarchar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Process", Storage="_Events", ThisKey="ApplicationID", OtherKey="ApplicationID")]
		public EntitySet<Process> Processes
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_User", Storage="_Users", ThisKey="ApplicationID", OtherKey="ApplicationID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Process entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Events(Process entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _Name;
		
		private EntitySet<Process> _Events;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Customer()
		{
			this._Events = new EntitySet<Process>(new Action<Process>(this.attach_Events), new Action<Process>(this.detach_Events));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="nvarchar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Process", Storage="_Events", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<Process> Processes
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_User", Storage="_Users", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Process entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Events(Process entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProcessID;
		
		private System.DateTime _LastUpdate;
		
		private System.Nullable<int> _Data;
		
		private int _EventID;
		
		private EntityRef<Process> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcessIDChanging(int value);
    partial void OnProcessIDChanged();
    partial void OnCreationTimeChanging(System.DateTime value);
    partial void OnCreationTimeChanged();
    partial void OnCounterChanging(System.Nullable<int> value);
    partial void OnCounterChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    #endregion
		
		public Event()
		{
			this._Event = default(EntityRef<Process>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessID", DbType="int NOT NULL")]
		public int ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcessIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessID = value;
					this.SendPropertyChanged("ProcessID");
					this.OnProcessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationTime
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="int NULL")]
		public System.Nullable<int> Counter
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnCounterChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Counter");
					this.OnCounterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Process_Event", Storage="_Event", ThisKey="ProcessID", OtherKey="ProcessID", IsForeignKey=true)]
		public Process Process
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Process previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._ProcessID = value.ProcessID;
					}
					else
					{
						this._ProcessID = default(int);
					}
					this.SendPropertyChanged("Process");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Demand")]
	public partial class Demand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _DemandID;
		
		private bool _IsMet;
		
		private string _ErrorMessage;
		
		private string _CronExpression;
		
		private System.Nullable<int> _MaxRunTime;
		
		private System.Nullable<int> _QuantityTime;
		
		private System.Nullable<int> _QuantityValue;
		
		private string _Comment;
		
		private System.Nullable<System.DateTime> _NextRunTime;
		
		private System.Nullable<int> _UtcOffset;
		
		private int _Priority;
		
		private EntitySet<History> _Histories;
		
		private EntityRef<Process> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcessIDChanging(int value);
    partial void OnProcessIDChanged();
    partial void OnDemandIDChanging(int value);
    partial void OnDemandIDChanged();
    partial void OnIsMetChanging(bool value);
    partial void OnIsMetChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    partial void OnCronExpressionChanging(string value);
    partial void OnCronExpressionChanged();
    partial void OnMaxRunTimeChanging(System.Nullable<int> value);
    partial void OnMaxRunTimeChanged();
    partial void OnQuantityTimeChanging(System.Nullable<int> value);
    partial void OnQuantityTimeChanged();
    partial void OnQuantityValueChanging(System.Nullable<int> value);
    partial void OnQuantityValueChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnNextRunTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnNextRunTimeChanged();
    partial void OnUtcOffsetChanging(System.Nullable<int> value);
    partial void OnUtcOffsetChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    #endregion
		
		public Demand()
		{
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._Event = default(EntityRef<Process>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="int NOT NULL")]
		public int ProcessID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcessIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("ProcessID");
					this.OnProcessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandID", DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DemandID
		{
			get
			{
				return this._DemandID;
			}
			set
			{
				if ((this._DemandID != value))
				{
					this.OnDemandIDChanging(value);
					this.SendPropertyChanging();
					this._DemandID = value;
					this.SendPropertyChanged("DemandID");
					this.OnDemandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMet", DbType="bit NOT NULL")]
		public bool IsMet
		{
			get
			{
				return this._IsMet;
			}
			set
			{
				if ((this._IsMet != value))
				{
					this.OnIsMetChanging(value);
					this.SendPropertyChanging();
					this._IsMet = value;
					this.SendPropertyChanged("IsMet");
					this.OnIsMetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="nvarchar(MAX) NULL")]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CronExpression", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
		public string CronExpression
		{
			get
			{
				return this._CronExpression;
			}
			set
			{
				if ((this._CronExpression != value))
				{
					this.OnCronExpressionChanging(value);
					this.SendPropertyChanging();
					this._CronExpression = value;
					this.SendPropertyChanged("CronExpression");
					this.OnCronExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxRunTime", DbType="int NOT NULL")]
		public System.Nullable<int> MaxRunTime
		{
			get
			{
				return this._MaxRunTime;
			}
			set
			{
				if ((this._MaxRunTime != value))
				{
					this.OnMaxRunTimeChanging(value);
					this.SendPropertyChanging();
					this._MaxRunTime = value;
					this.SendPropertyChanged("MaxRunTime");
					this.OnMaxRunTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityTime", DbType="int NULL")]
		public System.Nullable<int> QuantityTime
		{
			get
			{
				return this._QuantityTime;
			}
			set
			{
				if ((this._QuantityTime != value))
				{
					this.OnQuantityTimeChanging(value);
					this.SendPropertyChanging();
					this._QuantityTime = value;
					this.SendPropertyChanged("QuantityTime");
					this.OnQuantityTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityValue", DbType="int NULL")]
		public System.Nullable<int> QuantityValue
		{
			get
			{
				return this._QuantityValue;
			}
			set
			{
				if ((this._QuantityValue != value))
				{
					this.OnQuantityValueChanging(value);
					this.SendPropertyChanging();
					this._QuantityValue = value;
					this.SendPropertyChanged("QuantityValue");
					this.OnQuantityValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="nvarchar(MAX) NULL")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextRunTime", DbType="DATETIME NULL")]
		public System.Nullable<System.DateTime> NextRunTime
		{
			get
			{
				return this._NextRunTime;
			}
			set
			{
				if ((this._NextRunTime != value))
				{
					this.OnNextRunTimeChanging(value);
					this.SendPropertyChanging();
					this._NextRunTime = value;
					this.SendPropertyChanged("NextRunTime");
					this.OnNextRunTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtcOffset", DbType="int NOT NULL DEFAULT(1)")]
		public System.Nullable<int> UtcOffset
		{
			get
			{
				return this._UtcOffset;
			}
			set
			{
				if ((this._UtcOffset != value))
				{
					this.OnUtcOffsetChanging(value);
					this.SendPropertyChanging();
					this._UtcOffset = value;
					this.SendPropertyChanged("UtcOffset");
					this.OnUtcOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Demand_History", Storage="_Histories", ThisKey="DemandID", OtherKey="DemandID")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Process_Demand", Storage="_Event", ThisKey="ProcessID", OtherKey="ProcessID", IsForeignKey=true)]
		public Process Process
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Process previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Demands.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Demands.Add(this);
						this._EventID = value.ProcessID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Process");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Demand = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Demand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Email;
		
		private string _Password;
		
		private System.Nullable<int> _ApplicationID;
		
		private System.Nullable<int> _CustomerID;
		
		private bool _IsAdmin;
		
		private int _UserID;
		
		private string _Mobile;
		
		private EntitySet<UserSubscription> _UserSubscriptions;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Application> _Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnApplicationIDChanging(System.Nullable<int> value);
    partial void OnApplicationIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    #endregion
		
		public User()
		{
			this._UserSubscriptions = new EntitySet<UserSubscription>(new Action<UserSubscription>(this.attach_UserSubscriptions), new Action<UserSubscription>(this.detach_UserSubscriptions));
			this._Customer = default(EntityRef<Customer>);
			this._Application = default(EntityRef<Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="int NULL")]
		public System.Nullable<int> ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="int NULL")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="nvarchar(50)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSubscription", Storage="_UserSubscriptions", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserSubscription> UserSubscriptions
		{
			get
			{
				return this._UserSubscriptions;
			}
			set
			{
				this._UserSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_User", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_User", Storage="_Application", ThisKey="ApplicationID", OtherKey="ApplicationID", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._ApplicationID = value.ApplicationID;
					}
					else
					{
						this._ApplicationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserSubscriptions(UserSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserSubscriptions(UserSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HistoryID;
		
		private int _DemandID;
		
		private string _Status;
		
		private System.Nullable<int> _Counter;
		
		private System.DateTime _CreationTime;
		
		private string _Remark;
		
		private bool _IsExported;
		
		private EntityRef<Demand> _Demand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistoryIDChanging(int value);
    partial void OnHistoryIDChanged();
    partial void OnDemandIDChanging(int value);
    partial void OnDemandIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCounterChanging(System.Nullable<int> value);
    partial void OnCounterChanged();
    partial void OnCreationTimeChanging(System.DateTime value);
    partial void OnCreationTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnIsExportedChanging(bool value);
    partial void OnIsExportedChanged();
    #endregion
		
		public History()
		{
			this._Demand = default(EntityRef<Demand>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistoryID", DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HistoryID
		{
			get
			{
				return this._HistoryID;
			}
			set
			{
				if ((this._HistoryID != value))
				{
					this.OnHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._HistoryID = value;
					this.SendPropertyChanged("HistoryID");
					this.OnHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandID", DbType="int NOT NULL")]
		public int DemandID
		{
			get
			{
				return this._DemandID;
			}
			set
			{
				if ((this._DemandID != value))
				{
					if (this._Demand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemandIDChanging(value);
					this.SendPropertyChanging();
					this._DemandID = value;
					this.SendPropertyChanged("DemandID");
					this.OnDemandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="nvarchar(50) NULL")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Counter", DbType="int NULL")]
		public System.Nullable<int> Counter
		{
			get
			{
				return this._Counter;
			}
			set
			{
				if ((this._Counter != value))
				{
					this.OnCounterChanging(value);
					this.SendPropertyChanging();
					this._Counter = value;
					this.SendPropertyChanged("Counter");
					this.OnCounterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="datetime NOT NULL")]
		public System.DateTime CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="nvarchar(MAX) NULL")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExported", DbType="bit NOT NULL default(0)")]
		public bool IsExported
		{
			get
			{
				return this._IsExported;
			}
			set
			{
				if ((this._IsExported != value))
				{
					this.OnIsExportedChanging(value);
					this.SendPropertyChanging();
					this._IsExported = value;
					this.SendPropertyChanged("IsExported");
					this.OnIsExportedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Demand_History", Storage="_Demand", ThisKey="DemandID", OtherKey="DemandID", IsForeignKey=true)]
		public Demand Demand
		{
			get
			{
				return this._Demand.Entity;
			}
			set
			{
				Demand previousValue = this._Demand.Entity;
				if (((previousValue != value) 
							|| (this._Demand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Demand.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Demand.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._DemandID = value.DemandID;
					}
					else
					{
						this._DemandID = default(int);
					}
					this.SendPropertyChanged("Demand");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSubscription")]
	public partial class UserSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _DemandID;
		
		private bool _SMS;
		
		private bool _Email;
		
		private EntityRef<User> _User;
		
		private EntityRef<Process> _Process;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnProcessIDChanging(int value);
    partial void OnProcessIDChanged();
    partial void OnSMSChanging(bool value);
    partial void OnSMSChanged();
    partial void OnEmailChanging(bool value);
    partial void OnEmailChanged();
    #endregion
		
		public UserSubscription()
		{
			this._User = default(EntityRef<User>);
			this._Process = default(EntityRef<Process>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandID", DbType="int NOT NULL", IsPrimaryKey=true)]
		public int ProcessID
		{
			get
			{
				return this._DemandID;
			}
			set
			{
				if ((this._DemandID != value))
				{
					if (this._Process.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcessIDChanging(value);
					this.SendPropertyChanging();
					this._DemandID = value;
					this.SendPropertyChanged("ProcessID");
					this.OnProcessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMS", DbType="bit NOT NULL")]
		public bool SMS
		{
			get
			{
				return this._SMS;
			}
			set
			{
				if ((this._SMS != value))
				{
					this.OnSMSChanging(value);
					this.SendPropertyChanging();
					this._SMS = value;
					this.SendPropertyChanged("SMS");
					this.OnSMSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="bit NOT NULL")]
		public bool Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSubscription", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserSubscriptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserSubscriptions.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Process_UserSubscription", Storage="_Process", ThisKey="ProcessID", OtherKey="ProcessID", IsForeignKey=true)]
		public Process Process
		{
			get
			{
				return this._Process.Entity;
			}
			set
			{
				Process previousValue = this._Process.Entity;
				if (((previousValue != value) 
							|| (this._Process.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Process.Entity = null;
						previousValue.UserSubscriptions.Remove(this);
					}
					this._Process.Entity = value;
					if ((value != null))
					{
						value.UserSubscriptions.Add(this);
						this._DemandID = value.ProcessID;
					}
					else
					{
						this._DemandID = default(int);
					}
					this.SendPropertyChanged("Process");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Log")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private string _Message;
		
		private string _StackTrace;
		
		private System.DateTime _CreationTime;
		
		private string _LogType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnCreationTimeChanging(System.DateTime value);
    partial void OnCreationTimeChanged();
    partial void OnLogTypeChanging(string value);
    partial void OnLogTypeChanged();
    #endregion
		
		public Log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", DbType="INT NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="nvarchar(255)", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="nvarchar(MAX) NULL", CanBeNull=false)]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="datetime")]
		public System.DateTime CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogType", DbType="nvarchar(255)", CanBeNull=false)]
		public string LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
